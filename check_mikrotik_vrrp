#!/usr/bin/perl -w
#
# Copyright (C) 2017 Oliver Hitz <oliver@net-track.ch>
#
# Check state of VRRP interfaces on a Mikrotik router.
#
# Doesn't work with nagios' embedded perl, so switch it off:
# nagios: -epn

use Getopt::Long qw(:config no_ignore_case);
use FindBin;
use lib $FindBin::Bin;
use Mtik;
use strict;

use constant {
  STATE_OK => 0,
  STATE_WARNING => 1,
  STATE_CRITICAL => 2,
  STATE_UNKNOWN => 3,
};

my $cfg_verbosity = 0;
my $cfg_host;
my $cfg_port = 8728;
my $cfg_username;
my $cfg_password;
my $cfg_interface;
my $cfg_state = "master";

sub usage
{
  print <<EOT;
Usage: $0 [parameters]

Parameters:

-H hostname          Host (name or IP) to connect to
-p port              API port (default: 8728)
-U username          API username
-P password          API password
-I interface         Name of VRRP interface to check
-S state             Expected state: master, backup (default: master)

-v, -vv              Increase verbosity
EOT
  exit(STATE_UNKNOWN);
}

sub debug
{
  my $verbose = shift;
  my $format = shift;
  my (@args) = @_;

  if ($verbose <= $cfg_verbosity) {
    printf $format, @args;
  }  
}

sub quit
{
  my $status = shift;
  my (@messages) = @_;
  
  my $status_text;
  
  if ($status == STATE_OK) {
    $status_text = "OK";
  } elsif ($status == STATE_WARNING) {
    $status_text = "WARNING";
  } elsif ($status == STATE_CRITICAL) {
    $status_text = "CRITICAL";
  } else {
    $status_text = "UNKNOWN";
  }

  printf
      "Peer %s - %s\n",
      $status_text,
      join(" | ", @messages);

  exit($status);
}

if (!GetOptions("h|help" => sub { usage(); },
                "v|verbose" => sub { $cfg_verbosity = 1; },
                "vv" => sub { $cfg_verbosity = 2; },
                "H|host=s" => \$cfg_host,
                "p|port=i" => \$cfg_port,
                "U|username=s" => \$cfg_username,
                "P|password=s" => \$cfg_password,
                "I|interface=s" => \$cfg_interface,
                "S|state=s" => \$cfg_state)) {
  usage();
}

if (!$cfg_host || !$cfg_username || !$cfg_interface) {
  usage();
}

debug(1, "Logging in to Mikrotik API\n");
if (!Mtik::login($cfg_host, $cfg_username, $cfg_password, $cfg_port)) {
  quit(STATE_CRITICAL, "Cannot connect to Mikrotik API.");
}
debug(1, "Ok, logged in\n");

my (%vrrp_ifs) = Mtik::get_by_key("/interface/vrrp/print", "name");

if ($cfg_verbosity == 2) {
  debug(3, "VRRP:\n");

  foreach my $vrrp_if (keys %vrrp_ifs) {
    printf
        "%s: %s\n",
        $vrrp_if,
        join(", ", map{qq{$_=$vrrp_ifs{$vrrp_if}{$_}}} keys %{$vrrp_ifs{$vrrp_if}});
  }
}

my $vrrp_if = $vrrp_ifs{$cfg_interface};
if (!$vrrp_if) {
  quit(STATE_CRITICAL, sprintf("VRRP interface %s not found.", $cfg_interface));
}

if ($vrrp_if->{disabled} eq "true") {
  quit(STATE_CRITICAL,
       sprintf("VRRP interface %s is disabled", $cfg_interface),
       sprintf("Interface details: %s", join(", ", map{qq{$_=$vrrp_if->{$_}}} keys %{$vrrp_if})));

}

my $vrrp_state = "unknown";
if (defined($vrrp_if->{master}) && $vrrp_if->{master} eq "true") {
  $vrrp_state = "master";
} elsif (defined($vrrp_if->{backup}) && $vrrp_if->{backup} eq "true") {
  $vrrp_state = "backup";
}

if ($cfg_state eq "master") {
  if ($vrrp_state ne "master") {
    quit(STATE_CRITICAL,
         sprintf("VRRP interface %s is %s", $cfg_interface, $vrrp_state),
         sprintf("Interface details: %s", join(", ", map{qq{$_=$vrrp_if->{$_}}} keys %{$vrrp_if})));
  }
} else {
  if ($vrrp_state ne "backup") {
    quit(STATE_CRITICAL,
         sprintf("VRRP interface %s is %s", $cfg_interface, $vrrp_state),
         sprintf("Interface details: %s", join(", ", map{qq{$_=$vrrp_if->{$_}}} keys %{$vrrp_if})));
  }
}

quit(STATE_OK,
     sprintf("VRRP interface %s is %s", $cfg_interface, $vrrp_state),
     sprintf("Interface details: %s", join(", ", map{qq{$_=$vrrp_if->{$_}}} keys %{$vrrp_if})));
